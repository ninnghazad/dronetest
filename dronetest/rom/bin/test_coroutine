local f1 = function() 
	local i = 0
	for i = 1,200,1 do
	--while true do
		i = i + 1
		--print("AHA! "..i)
		coroutine.yield()
	end
	
end
local f2 = function() 
	local i = 0
	for i = 1,10000000,1 do
		i = i + 1
		--print("AHA! "..i)
	end
	
end


local co 

co = coroutine.create(f1)
while coroutine.status(co) == "suspended" do 
	coroutine.resume(co)
end

co = coroutine.create(f2)
while coroutine.status(co) == "suspended" do 
	coroutine.resume(co)
end

return true


















--[[
jit.off(f,true)
setfenv(f,getfenv(1))
local function e(msg) print("E1: '"..msg.."'") error("E1 >>> "..msg) end
local ff = function() xpcall(f,e) end
local co = coroutine.create(ff)

while coroutine.status(co) == "suspended" do 
	local function e(msg) error("too many instructions without yielding") end
	debug.sethook(co,e,"",dronetest.max_userspace_instructions)
	coroutine.resume(co) 
	coroutine.yield()
end


local cr = table.copy(coroutine)
cr._error = function(msg) if msg == "attempt to yield across C-call boundary" then msg = "too many instructions without yielding" end print("Error in coroutine: '"..msg.."'") coroutine.yield() end
cr.create = function(f)
	jit.off(f,true)
	--setfenv(f,getfenv(1))
	local ff = function() xpcall(f,cr._error) end
	local co = coroutine.create(ff)
	return co
end

cr.resume = function(co)
	local function e(msg) error("too many instructions without yielding") end
	debug.sethook(co,coroutine.yield,"",dronetest.max_userspace_instructions)
	coroutine.resume(co) 
	coroutine.yield()
end
--]]

