--[[ quarry demo
this probably should be removed for release, or be put as a secret-prog. 
would take away a lot of fun if we just gave a working quarry to the player.
this contacts a drone and makes it dig through a block below it's current position.
the drone will try to unload items to a chest above it's current position, and will return
to that position once finished.
this supports backfilling with custom ignores, meaning you can specify blocknames in
ignore{} which will be either not be dug at all, or be placed back after the drone dug through.
this leaves less of a mess in the landscape.
-ninnghazad
--]]
-- options
	-- table of nodenames to to pickup/dig
	local ignore = {"default:stone","default:gravel","default:dirt","default:sand","default:dirt_with_grass","default:cobble","default:leaves"}
	ignore = {}
	
	-- Using this the drone will try to put back all blocks it had to dig but should'nt pick up.
	local backfill = true
-- end of options

print("QUARRY")
local droneid = tonumber(argv[1])
local radius = tonumber(argv[2])
local depth = tonumber(argv[3])
if droneid == nil then
	print("Place drone at center of top of area to be mined.")
	print("Usage: quarry drone-id radius depth")
	return false
end

-- bounding box is relative to current drone position.
local posMin = {x=-radius,y=-depth,z=-radius}
local posMax = {x=radius,y=0,z=radius}






local channel = "dronetest:drone:"..droneid
local drone = peripheral.wrap(channel)
if drone == nil then
	return
end
local inv = minetest.get_inventory({type="detached",name="dronetest_drone_"..droneid})
local invSize = inv:get_size("main")
local doBackfill = nil
local doBackfill_dir,doBackfill_slot
local ry = math.ceil((math.abs(posMax.y - posMin.y)+1)/3)
local rz = math.abs(posMax.z - posMin.z)+1
local rx = math.abs(posMax.x - posMin.x)+1
local totalBlocks = rx*ry*rz
local x,y,z,r
local startTime = sys.time()/20
local start = 0 
local pos = dronetest.drones[droneid].object:getpos()
if pos == nil then
	print("Drone seems to be in unloaded area.")
	return
end
local startPos = table.copy(pos)
local dir = dronetest.yaw2dir(dronetest.snapRotation(dronetest.drones[droneid].object:getyaw()))
local startDir = dir
posMin.x = posMin.x + pos.x
posMin.y = posMin.y + pos.y
posMin.z = posMin.z + pos.z
posMax.x = posMax.x + pos.x
posMax.y = posMax.y + pos.y
posMax.z = posMax.z + pos.z

local xDirs = { }
xDirs[0] = 0
xDirs[1] = 1
xDirs[2] = 0
xDirs[3] = -1
xDirs[4] = 0
xDirs[5] = 0
local yDirs = { }
yDirs[0] = 0
yDirs[1] = 0
yDirs[2] = 0
yDirs[3] = 0
yDirs[4] = 1
yDirs[5] = -1
local zDirs = { }
zDirs[0] = 1
zDirs[1] = 0
zDirs[2] = -1
zDirs[3] = 0
zDirs[4] = 0
zDirs[5] = 0
local xDir = xDirs[dir]
local yDir = 0
local zDir = zDirs[dir]
local skip = 0
local target
local digged = {}

local function addToDigged(name)
	if name == nil then return nil end
	if digged[name] == nil then digged[name] = 1
	else digged[name] = digged[name] + 1 end
	return digged[name]
end

function getDirection(x , y , z)
	if z < 0 then
		return 2
	elseif z > 0 then
		return 0
	elseif x > 0 then
		return 1
	elseif x < 0 then
		return 3
	elseif y > 0 then
		return 4	
	elseif y < 0 then
		return 5
	else
		print("bug: invalid direction "..x..","..y)
		return -1
	end
end


function turnDir(dir)
	if dir < 4 then
		
	local rot = (getDirection(xDir,yDir,zDir) - getDirection(xDirs[dir],0,zDirs[dir]))
	-- Make sure we use the shortest direction to get where we want
	if rot > 2 then
		rot = rot - 4
	elseif rot < -2 then
		rot = rot + 4
	end
	while rot ~= 0 do
		if rot < 0 then
			drone.turnLeft()
			rot = rot + 1
		end
		if rot > 0 then
			drone.turnRight()
			rot = rot - 1
		end
	end
	xDir = xDirs[dir]
	yDir = 0
	zDir = zDirs[dir]
	end
end

function goDir(dir)
	
	if dir == 4 then return drone.up()
	elseif dir == 5 then return drone.down()
	else turnDir(dir) return drone.forward() end
end

function digDir(dir,pickup)
	if dir == 4 then return drone.digUp(pickup)
	elseif dir == 5 then return drone.digDown(pickup)
	else turnDir(dir) return drone.dig(pickup) end
end

function placeDir(dir,slot)
--print("place slot "..slot)
	if dir == 4 then return drone.placeUp(slot)
	elseif dir == 5 then return drone.placeDown(slot)
	else turnDir(dir) return drone.place(slot) end
end
local reverseDirs = { [0] = 2,[1] = 3, [2] = 0, [3] = 1,[4] = 5,[5] = 4}
function digTo(target,pickup)
	--print("digTo: "..dump(target))
	coroutine.yield()
	local dir = -1
	local counter = 0
	local digged = ""
	local slot = 0
	while pos.x ~= target.x or pos.z ~= target.z or pos.y ~= target.y do
		
		if pos.z < target.z then dir = 0
		elseif pos.z > target.z then dir = 2
		elseif pos.x < target.x then dir = 1
		elseif pos.x > target.x then dir = 3 
		elseif pos.y < target.y then dir = 4
		elseif pos.y > target.y then dir = 5 end
		
		local r,t = goDir(dir)
		if not r then
			digged = digDir(dir,pickup or backfill)
			r,t = goDir(dir)
			if not r then
				return false,t
			end
			
			if doBackfill ~= nil then doBackfill(dir) end
			if digged ~= nil and backfill and not pickup and digged ~= "ignore" and minetest.registered_nodes[digged] ~= nil then
				local d = minetest.registered_nodes[digged].drop
				if d == nil then d = digged end
				local slot = drone.findInInventory(d)
				print("BACKFILL: "..digged.." in "..dump(slot))
				if slot then
					doBackfill_slot = slot
					doBackfill = function(dir)
				--		print("WILL BACKFILL USING SLOT "..doBackfill_slot.." dir: "..dir.." bf: "..dump(backfill).." pu: "..dump(pickup))
						placeDir(reverseDirs[dir],doBackfill_slot)
						turnDir(dir)
				--		print("BACKFILLED!")
					end
				end
			end
		else
			if doBackfill ~= nil then doBackfill(dir) end
			doBackfill = nil
		
		end
		
		
		pos.x = pos.x + xDirs[dir]
		pos.z = pos.z + zDirs[dir]
		pos.y = pos.y + yDirs[dir]
	end
	--if doBackfill ~= nil then doBackfill(dir) end
	--doBackfill = nil
		
	return true
end
local function unload()
	print("unload ...")
	digTo(startPos,true)
--	goDir(3)
	while drone.dropUp() do
		--print("unloading ...")
		coroutine.yield()
	end
--	goDir(1)
end	
local function shouldDig(name)
	if type(name) ~= "string" then return false end
	for _,ign in ipairs(ignore) do
		if ign == name or ign == minetest.registered_nodes[name].drop then
		--	print("block "..name.." matches ignore "..ign)
			return false
		end
	end
	--print("block "..name.." doesnt match ignore")
	return true
end
local function isFull()
	-- save 1 free spot so drone can backfill 
	for i = 1,invSize-1,1 do
		if inv:get_stack("main",i):is_empty() then return false end
	end
	return true
end

for i = start,totalBlocks-1,1 do
	dig = true
	x = (i % rx) + 1
	z = (((i-x+1) / rx) % rz) + 1
	y = (((i-(i%(rx*rz))) / (rx*rz)) * 3) + 1
	if y % 2 == 1 then
		z = rz+1-z
		x = rx+1-x
	end
	if z % 2 ~= 1 then
		x = rx+1-x
	end
	x = x + posMin.x - 1
	z = z + posMin.z - 1
	y = (posMax.y - y) 
	if y < posMin.y then y = posMin.y end
	if y > posMax.y then y = posMax.y end
	target = {x=x,y=y+skip,z=z}
		
	if addToDigged(digTo(target,shouldDig(drone.inspect()))) then 
		if y < posMax.y and shouldDig(drone.inspectUp()) then addToDigged(drone.digUp(true)) end
		if y > posMin.y and shouldDig(drone.inspectDown()) then addToDigged(drone.digDown(true)) end
		if skip > 0 then skip = skip - 1 end
	else 
		print("could not dig to "..x..","..y..","..z)
		return false
	end
	if isFull() then
		print("drone is stuffed, returning")
--		unload()
		print("finished unloading, returning to work")
	end
	coroutine.yield()
end
--unload()
print("finished quarry")
print(dump(digged))
return true
